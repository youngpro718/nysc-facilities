Title: React internal error: "Should have a queue. This is likely a bug in React. Please file an issue."

Environment
- React: 18.2.0
- ReactDOM: 18.2.0
- React Router DOM: 6.30.1
- @tanstack/react-query: 5.84.1
- Supabase JS: 2.53.0
- Vite: 5.4.19
- @vitejs/plugin-react-swc: 3.11.0
- Runtime: Chrome (Vite dev server)
- App type: SPA (createRoot)

Summary
We intermittently hit a fatal runtime error with the message:

  "Should have a queue. This is likely a bug in React. Please file an issue."

The error bubbles to our ErrorBoundary. The stack mentions Router/BrowserRouter and our providers. It seems correlated with bursts of concurrent state updates triggered by realtime events and React Query cache invalidations.

Stack excerpt
- at ErrorBoundary (src/components/error/ErrorBoundary.tsx:279:5)
- at AuthErrorBoundary (src/components/error/AuthErrorBoundary.tsx:228:37)
- at Router (react-router-dom)
- at BrowserRouter (react-router-dom)
- at QueryClientProvider (@tanstack/react-query)
- at App

What we’re doing (high level)
- We subscribe to a realtime channel (Supabase)
- On INSERT/UPDATE/DELETE events, we optimistically update cache via React Query’s setQueryData and schedule invalidateQueries
- We previously had overlapping refetch intervals and multiple rapid cache writes
- After the error appeared, we mitigated by debouncing invalidations and serializing enrichment updates via a simple async queue

Minimal repro sketch (pseudo-code)

function useRealtime() {
  const qc = useQueryClient();

  useEffect(() => {
    const channel = subscribe('*', (evt) => {
      // Immediate optimistic update
      qc.setQueryData(['items'], (old = []) => apply(evt, old));

      // Kick a background network fetch + cache update
      Promise.resolve().then(async () => {
        const enriched = await fetchExtra(evt);
        qc.setQueryData(['items'], (old = []) => merge(enriched, old));
      });

      // Also invalidate to refetch
      qc.invalidateQueries({ queryKey: ['items'] });
    });

    return () => channel.unsubscribe();
  }, [qc]);
}

Observed
- Intermittently, during spikes of realtime events (e.g., multiple INSERTs close together), React crashes with the above message.
- The crash frequency dropped significantly after we:
  - Debounced invalidateQueries (~500ms)
  - Introduced a sequential queue to serialize the background enrichment + setQueryData updates

Expected
- React should not crash from overlapping state updates in userland hooks using documented APIs (setQueryData, invalidateQueries), even when events arrive quickly.

Notes / Hypotheses
- Not using StrictMode
- React and react-dom versions match; only one copy in the bundle (verified via npm ls)
- Single root via createRoot, no additional roots
- Could be an internal scheduler edge case when enqueueing updates to fibers that were just torn down/changed by Router navigation or when a component unmounts while queued updates target that component’s state.

Request
- Guidance on whether the message indicates a known issue in 18.2.0
- Any recommended diagnostics to capture Fiber/queue state when this occurs
- Whether this is addressed in newer canaries/RCs

Workarounds tried
- Debounce invalidations and serialize cache updates (significantly reduces incidents)
- Ensured cleanup of timers/subscriptions on unmount

Thank you!
